{"version":3,"sources":["Components/Header.js","Components/Form.js","Components/SpaceWeather.js","Components/Container.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","WxForm","useState","weatherData","setWeatherData","regZipCode","useRef","saveToMongo","event","a","preventDefault","body","JSON","stringify","zipCode","current","value","fetch","method","headers","response","json","data","console","log","error","onSubmit","type","placeholder","ref","name","src","weather","icon","alt","main","description","temp","humidity","feels_like","temp_min","temp_max","SpaceWeather","frameBorder","title","width","max-width","height","max-height","href","Container","props","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7614507.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../Stylesheets/header.css';\n\nconst Header = () => {\n    return  <div className=\"header\">\n                <h1>Astro Wx</h1>\n                <div className=\"annotation\">Local and Space Weather in one place</div>\n            </div>\n}\n\nexport default Header;","import { useState, useRef } from 'react';\nimport '../Stylesheets/form.css';\n\nconst prod = 'https://astro-wx.herokuapp.com/';\nconst dev = 'http://localhost:3009'\nconst url = (process.env.NODE_ENV ==='development' ? dev : prod)\n// console.log(process.env.NODE_ENV)\n\nconst WxForm = () => {\n    const [weatherData, setWeatherData] = useState({})\n    const regZipCode = useRef(null);\n    const saveToMongo = async (event) => {\n        event.preventDefault();\n        const body = JSON.stringify({\n            zipCode: regZipCode.current.value\n        })\n        try {\n          const response = await fetch(`${url}/api/wxmongo`, {\n            method: 'POST',\n            headers: {\n              'Content-type': 'application/json'\n            },\n              body\n          })\n          const data = await response.json();\n          setWeatherData(data)\n          console.log(data);\n        } catch (error) {\n          console.error(400).json(error)\n        }\n      }\n    \n    return  <div className=\"wx-form\">\n                <div className=\"zipCode\">\n                    <form onSubmit= {saveToMongo}>\n                        <label>Zipcode:\n                            <input type=\"text\" placeholder=\"Enter zip code\" ref={regZipCode}/>\n                        </label>\n\n                        <input type=\"submit\" value=\"Get Weather\"/>\n                    </form>\n                </div>\n                <div className=\"local-wx\">\n                    <h1 className=\"local-wx-title\">Current Local Weather</h1>\n                    \n                    <h2 className=\"city-name\">City: {weatherData.name}</h2>\n                    <div className=\"local-wx-container\">\n                        <div className=\"wx-icon\">\n                            <img src={weatherData.weather && `http://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`}  alt=\"weather-icon\"/>\n                        </div>\n                        <div className=\"current-wx\">\n                            <span className=\"current-description\">Current Conditions: {weatherData.weather && weatherData.weather[0].main}, {weatherData.weather && weatherData.weather[0].description}</span>\n                            <p><span className=\"curr-temp\">Current Temp: {weatherData.main && weatherData.main.temp} 째F</span></p>\n                            <p><span className=\"humidity\">Humidity: {weatherData.main && weatherData.main.humidity}%</span></p>\n                            \n                            <span className=\"feels-like\">Feels like: {weatherData.main && weatherData.main.feels_like}째F</span>\n                        </div>\n                        <div className=\"temps\">\n                            <span className=\"min-temp\">Today's Low: {weatherData.main && weatherData.main.temp_min}째F</span>\n                            <p><span className=\"max-temp\">Today's High: {weatherData.main && weatherData.main.temp_max}째F</span></p>\n                        </div>\n                    </div>\n                </div>\n           </div>\n}\n\nexport default WxForm;","\nimport '../Stylesheets/spaceweather.css';\nconst SpaceWeather = () => {\n    return  <div className=\"space-container\">\n                <h1>Space Weather</h1>  \n                <div className=\"swx-overview\">\n                  <img src=\"https://services.swpc.noaa.gov/images/swx-overview-small.gif\" alt=\"Space Weather Overview\"  />\n               \n                <div className=\"space-forecast\">\n                  <iframe src=\"https://services.swpc.noaa.gov/text/3-day-forecast.txt\" \n                    frameBorder=\"10\" \n                    title=\"3 Day Space Weather Forecast\"\n                    width=\"400px\"\n                    max-width=\"500px\"\n                    height=\"450px\"\n                    max-height=\"500px\"\n                    >\n                  </iframe>\n                </div>\n                </div>\n                    <p>Space Weather data and images sourced from <a href=\"https://www.swpc.noaa.gov/content/data-access\">NOAA Space Weather Prediction Center</a></p>\n            </div>\n}\n\nexport default SpaceWeather;","import React, { useState, useEffect } from 'react';\nimport '../Stylesheets/container.css';\nimport WxForm from './Form';\nimport SpaceWeather from './SpaceWeather';\n\n\nconst Container = (props) => {\n    const [weatherData, setWeatherData] = useState({})\n\n    return  <div className=\"wx-container\">\n                <WxForm />\n                <SpaceWeather />\n            </div>\n}\n\nexport default Container;","\nimport Header from './Components/Header';\nimport Container from './Components/Container';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Container />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}